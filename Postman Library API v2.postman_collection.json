{
	"info": {
		"_postman_id": "55295391-f5a0-4767-a484-e5cfeddd33d4",
		"name": "Postman Library API v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28339259"
	},
	"item": [
		{
			"name": "get books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Json structure\", () =>{\r",
							"    let response = pm.response.json();\r",
							"    let dataAA = Object.keys(response[0]).length;\r",
							"    pm.expect(dataAA).to.eql(8);\r",
							"    pm.expect(dataAA).to.be.a('number')\r",
							"})\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"My book2\", () => {\r",
							"    let response = pm.response.json();\r",
							"    response.forEach(function(book){\r",
							"    if(book.title === \"TEST TEST\")\r",
							"    pm.expect(book).to.haveOwnProperty(\"id\")\r",
							"});\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Assersions author\", () => {\r",
							"    let response = pm.response.json();\r",
							"    let myAuthor;\r",
							"    response.forEach((autor)=>{\r",
							"    if(autor.author === \"PATRYK\"){\r",
							"        myAuthor = autor\r",
							"    }\r",
							"});\r",
							"    pm.expect(myAuthor.author).to.eql(\"PATRYK\")\r",
							"    pm.expect(myAuthor.genre).to.eql(\"fiction\")\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "get fiction books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"console.log(response)\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Books written by PATRYK\", () => {\r",
							"    let response = pm.response.json();\r",
							"    let count = 0;\r",
							"\r",
							"    for(let data of response){\r",
							"    if(data.author === \"PATRYK\"){\r",
							"        console.log(data)\r",
							"        count +=1\r",
							"    }\r",
							"}\r",
							"    pm.expect(count).to.eql(1)\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books?genre=fiction&checkedOut=false",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "genre",
							"value": "fiction"
						},
						{
							"key": "checkedOut",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201)\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"BookId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "api-key",
						"value": "postmanrulz",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"TEST TEST\",\r\n  \"author\": \"PATRYK\",\r\n  \"genre\": \"fiction\",\r\n  \"yearPublished\": 2024\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "get book by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get(\"BookId\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"ID is the same\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"BookId\"))\r",
							"    pm.expect(jsonData.yearPublished).to.be.a(\"number\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "checkout a book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"\r",
							"console.log(response);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Checkout is true\", () => {\r",
							"    pm.expect(response.checkedOut).to.be.true\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n  \"checkedOut\": true,\r\n  \"yearPublished\": 2025\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/books/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":id"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get book by id after patch",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get(\"BookId\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Patched book\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.eql(pm.collectionVariables.get(\"BookId\"))\r",
							"    pm.expect(jsonData.checkedOut).to.be.true\r",
							"    pm.expect(jsonData.yearPublished).to.eql(2025)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete a book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get(\"BookId\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"    pm.response.to.have.status(204)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get books after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Assersions\", () => {\r",
							"    response.find((bookid) => {\r",
							"    if(bookid.id === pm.collectionVariables.get(\"BookId\"))\r",
							"    pm.expect(bookid).to.be.a(\"object\")\r",
							"    pm.expect(bookid).to.haveOwnProperty(\"genre\")\r",
							"});\r",
							"});\r",
							"\r",
							"\r",
							"let findBook;\r",
							"\r",
							"for(let data of response){\r",
							"    if(data.id === pm.collectionVariables.get(\"BookId\")){\r",
							"        findBook = data;\r",
							"    };\r",
							"};\r",
							"\r",
							"pm.test(\"Undefined\", () => {\r",
							"    pm.expect(findBook).to.be.a(\"undefined\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "postmanrulz",
				"type": "string"
			},
			{
				"key": "key",
				"value": "api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://library-api.postmanlabs.com"
		},
		{
			"key": "skillcheckBaseUrl",
			"value": "https://postman-echo.com"
		},
		{
			"key": "favoriteActor",
			"value": "S.Stallone"
		},
		{
			"key": "BookId",
			"value": "79a4de43-8151-4ee2-b981-ab32b1647134"
		}
	]
}